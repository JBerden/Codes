#include "PQUnsorted.h"


//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------

PQUnsorted::PQUnsorted

  ( int     maxItems )

{
  maxItems_ = maxItems;

  items_ = new STDITEM[maxItems];
  
  clear();
}


//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------


PQUnsorted::~PQUnsorted()

{
}


//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------


void PQUnsorted::clear()

{
  count_ = 0; 
}


//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------


bool PQUnsorted::isEmpty()

{
  return count_ == 0;
}


//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------


void PQUnsorted::put

  ( STDITEM         item )

{
  items_[count_] = item;
  count_++;
}


//-----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------


STDITEM PQUnsorted::getPrio()

{
  STDITEM prioItem;

  int  i_min    = maxItems_;        // index of minimum position
  int  min_prio = maxPrio_;         // minimum priority up to now

  int  i;

  for ( i = 0 ; i < count_ ; i++ ) 
  {
    if ( items_[i].prio < min_prio ) 
    {
      i_min = i;
      min_prio = items_[i].prio;
    }
  }

  prioItem = items_[ i_min ];
  
  if ( i_min < (count_-1) )
  {
    items_[ i_min ] = items_[ count_ - 1 ]; // move
  }

  count_ --;  // lower counter

  return prioItem;
}

